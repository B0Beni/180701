import telebot
import config
from telebot import types  # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–æ–≤

# /start

# –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞
bot = telebot.TeleBot(config.bot_token)


# @bot.message_handler(commands=['start'])
# def start(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
#     btn2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
#     markup.add(btn1, btn2)
#     bot.send_message(message.chat.id,
#                      text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ç–≤–æ–µ–π —Å—Ç–∞—Ç—å–∏ –¥–ª—è habr.com".format(
#                          message.from_user), reply_markup=markup)
#
#
# @bot.message_handler(content_types=['text'])
# def func(message):
#     if (message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"):
#         bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ–µ—Ç.. –°–ø–∞—Å–∏–±–æ —á—Ç–æ —á–∏—Ç–∞–µ—à—å —Å—Ç–∞—Ç—å—é!)")
#     elif (message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         btn1 = types.KeyboardButton("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
#         btn2 = types.KeyboardButton("–ß—Ç–æ —è –º–æ–≥—É?")
#         back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
#         markup.add(btn1, btn2, back)
#         bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)
#     elif (message.text == "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"):
#         bot.send_message(message.chat.id, "–£ –º–µ–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏..")
#     elif message.text == "–ß—Ç–æ —è –º–æ–≥—É?":
#         bot.send_message(message.chat.id, text="–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å —á–∏—Ç–∞—Ç–µ–ª—è–º–∏")
#     elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
#         button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
#         markup.add(button1, button2)
#         bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
#     else:
#         bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª..")


@bot.message_handler(content_types=['text'])
def start(message):
    if message.text == '/start':
        bot.send_message(message.from_user.id, "–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(message, get_name)
    else:
        bot.send_message(message.from_user.id, "–ù–µ –ø–æ–Ω—è–ª –í–∞—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

def get_name(message):
    global name
    name = message.text
    bot.send_message(message.from_user.id, "–ö–∞–∫ —Ç–≤–æ—è —Ñ–∞–º–∏–ª–∏—è")
    bot.register_next_step_handler(message, get_surname)
def get_surname(message):
    global surname
    surname = message.text
    bot.send_message(message.from_user.id, "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç?")
    bot.register_next_step_handler(message, get_age)
def get_age(message):
    global age
    while age == 0:  # —É—Ç–æ—á–Ω—è–µ–º –º–µ–Ω—è–ª—Å—è –ª–∏ –≤–æ–∑–≤—Ä–∞—Å—Ç
        try:
            age = int(message.text)
        except ValueError:
            bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã")
            age = 1
            break
    quest = f'–¢–µ–±–µ {age} –ª–µ—Ç, –∏ —Ç—ã {name} {surname}?'
    keyboard = types.InlineKeyboardMarkup()
    yes = types.InlineKeyboardMarkup(text='–î–∞', callback_data='yes')
    keyboard.add(yes)
    no = types.InlineKeyboardMarkup(text='–î–∞', callback_data='no')
    keyboard.add(no)
    bot.send_message(message.from_user.id, text=quest, reply_markup=keyboard)

@bot.channel_post_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "yes":
        bot.send_message(call.message.chat.id, '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
    elif call.data == "no":
        bot.send_message(call.message.chat.id, '–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ... –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        bot.register_next_step_handler(call.message, get_name)


# –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞
bot.polling(none_stop=True)